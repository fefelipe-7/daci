name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  complexity-analysis:
    name: 📊 Complexity Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Analyze code complexity
        run: |
          echo "# 📊 Code Complexity Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Analyzing JavaScript files..." >> $GITHUB_STEP_SUMMARY
          
          # Contar linhas de código (excluindo node_modules, tests)
          LOC=$(find . -name "*.js" -not -path "./node_modules/*" -not -path "./tests/*" -not -path "./coverage/*" | xargs wc -l | tail -1 | awk '{print $1}')
          echo "- **Total Lines of Code**: $LOC" >> $GITHUB_STEP_SUMMARY
          
          # Contar arquivos
          FILES=$(find . -name "*.js" -not -path "./node_modules/*" -not -path "./tests/*" -not -path "./coverage/*" | wc -l)
          echo "- **Total Files**: $FILES" >> $GITHUB_STEP_SUMMARY
          
          # Arquivos grandes (>500 linhas)
          LARGE_FILES=$(find . -name "*.js" -not -path "./node_modules/*" -not -path "./tests/*" -exec wc -l {} + | awk '$1 > 500 {print}' | wc -l)
          echo "- **Files > 500 lines**: $LARGE_FILES" >> $GITHUB_STEP_SUMMARY
          
          if [ $LARGE_FILES -gt 5 ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **Warning**: Consider refactoring large files" >> $GITHUB_STEP_SUMMARY
          fi

  code-duplication:
    name: 🔄 Duplication Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
      
      - name: Check for code duplication
        run: |
          echo "# 🔄 Code Duplication Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Manual review recommended for:" >> $GITHUB_STEP_SUMMARY
          echo "- Repeated patterns in commands/" >> $GITHUB_STEP_SUMMARY
          echo "- Similar validation logic" >> $GITHUB_STEP_SUMMARY
          echo "- Duplicated error handling" >> $GITHUB_STEP_SUMMARY

  dependency-check:
    name: 📦 Dependency Health
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
      
      - name: Check for outdated dependencies
        run: |
          npm outdated || true
          
          echo "# 📦 Dependency Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Run \`npm outdated\` locally to see detailed information" >> $GITHUB_STEP_SUMMARY
      
      - name: Check dependency tree
        run: |
          DEPTH=$(npm ls --all 2>/dev/null | wc -l)
          echo "- **Dependency tree depth**: ~$DEPTH packages" >> $GITHUB_STEP_SUMMARY

  test-coverage:
    name: 📈 Test Coverage Report
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Generate coverage
        run: npm run test:coverage
        continue-on-error: true
      
      - name: Coverage summary
        run: |
          if [ -f coverage/coverage-summary.json ]; then
            echo "# 📈 Test Coverage" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Coverage report generated successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "# 📈 Test Coverage" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ No coverage data available" >> $GITHUB_STEP_SUMMARY
          fi

  code-style:
    name: 🎨 Code Style Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Check code formatting
        run: npm run format:check
        continue-on-error: true
      
      - name: Lint check
        run: npm run lint
        continue-on-error: true

  quality-summary:
    name: 📋 Quality Summary
    runs-on: ubuntu-latest
    needs: [complexity-analysis, code-duplication, dependency-check, test-coverage, code-style]
    if: always()
    
    steps:
      - name: Generate quality report
        run: |
          echo "# 🏆 Code Quality Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Complexity Analysis | ${{ needs.complexity-analysis.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Duplication Check | ${{ needs.code-duplication.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Health | ${{ needs.dependency-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Coverage | ${{ needs.test-coverage.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Style | ${{ needs.code-style.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          FAILED=0
          [ "${{ needs.complexity-analysis.result }}" = "failure" ] && FAILED=$((FAILED+1))
          [ "${{ needs.code-duplication.result }}" = "failure" ] && FAILED=$((FAILED+1))
          [ "${{ needs.dependency-check.result }}" = "failure" ] && FAILED=$((FAILED+1))
          [ "${{ needs.test-coverage.result }}" = "failure" ] && FAILED=$((FAILED+1))
          [ "${{ needs.code-style.result }}" = "failure" ] && FAILED=$((FAILED+1))
          
          if [ $FAILED -eq 0 ]; then
            echo "✅ **All quality checks passed!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **$FAILED quality check(s) need attention**" >> $GITHUB_STEP_SUMMARY
          fi
